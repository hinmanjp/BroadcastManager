@namespace BroadcastManager2.Components
@inject IJSRuntime JS

<style>
    #player_id {
        width: @width;
        height: @height;
        margin: auto;
    }

    i.op-con.op-warning::before {
        content: '';
    }
</style>

@if(showPlayer)
{
<div @attributes="hidden" >
    <div id="player_id"></div>
</div>
}

@code
{
    private IJSObjectReference? jsModule;
    private string width = "90%";
    private string height = "auto";
    private bool showPlayer = false;
    private Dictionary<string, object>? hidden { get; set; }

    public enum SourceType
    {
        webrtc,
        hls,
        dash,
        file,
    }

    protected override async Task OnInitializedAsync()
    {
        hidden = new Dictionary<string, object>();
        hidden.Add("hidden", "");
        showPlayer = false;
        Refresh();
        await Task.Delay(0);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
        await base.OnAfterRenderAsync(firstRender);
    }



    public void HidePlayer()
    {
        if(hidden != null && !hidden.Keys.Contains("hidden"))
            hidden.Add("hidden", "");
        showPlayer = false;

        Refresh();
    }

    public async Task StartPlayerAsync(string StreamUrl, SourceType sourceType, int Width=0, int Height=0)
    {
        if(hidden != null)
            hidden.Clear();
        showPlayer = true;
        Refresh();

        if(Width > 0)
            width = Width + "px";
        if(Height > 0)
            height = Height + "px";
        if (Width > 0 || Height > 0)
            Refresh();

        string sType = sourceType.ToString();
        if (sourceType == SourceType.file)
        {
            // oven media does not provide a list of supported file types. We'll just extract the extension and hope it works... :(
            // extensions listed in documentation are "'mp4' 'webm' or etc"
            int lastDot = StreamUrl.LastIndexOf('.') + 1;
            sType = StreamUrl.Substring(lastDot).ToLower();
        }

        jsModule = await JS.InvokeAsync<IJSObjectReference>( "import", "/Components/StreamViewer.razor.js" );
        //var m1 = await JS.InvokeAsync<IJSObjectReference>("import", "https://cdn.jsdelivr.net/npm/ovenplayer/dist/ovenplayer.js");
        var m1 = await JS.InvokeAsync<IJSObjectReference>("import", "/scripts/ovenplayer.js");
        if (jsModule is not null)
            await jsModule.InvokeVoidAsync("startPlayer", StreamUrl, sType);
        await Task.Delay(0);
    }

    private void Refresh()
    {
        _ = InvokeAsync( () => { StateHasChanged(); } );
    }

}