@page "/"
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Newtonsoft.Json;

@inject ProtectedSessionStorage pss
@inject NavigationManager NavManager
@inject AuthenticationStateProvider auth
<PageTitle>Broadcast Manager Login</PageTitle>

<MudTextField @bind-Value="AuthCode" AutoFocus="true" InputType="InputType.Text" Label="Auth Code" Variant="Variant.Outlined" Immediate="true" @onkeydown="@Enter" />
<MudButton Variant="Variant.Filled" OnClick="OnBtnClick">Login</MudButton>

@code{
    protected string AuthCode = "";

    protected async Task Enter( KeyboardEventArgs e )
    {

        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await OnBtnClick();
        }
        //else
        //    AuthCode += e.Key;
    }


    protected async Task OnBtnClick()
    {
        string code = AuthCode.TrimEnd(new []{ '\r','\n' });
        AuthCode = "";
        StateHasChanged();

        if ( !IsValid( code ) )
            return;

        var claims = new Claim[] { new Claim(ClaimTypes.Name, code) };
        var claimsJson = JsonConvert.SerializeObject( claims );
        await pss.SetAsync("auth", "claims", claimsJson);
        var result = await auth.GetAuthenticationStateAsync();

        

        if (result.User.Identity.IsAuthenticated)
        {
            NavManager.TryGetQueryString( "ReturnUrl", out string? returnUrl );
            if (!String.IsNullOrWhiteSpace(returnUrl))
                NavManager.NavigateTo(Uri.UnescapeDataString(returnUrl));
            else
                NavManager.NavigateTo( "/manager" );
        }
    }

    private bool IsValid(string AuthCode)
    {
        if (AuthCode == "***REMOVED***" ***REMOVED***)
            return true;

        return false;
    }

}